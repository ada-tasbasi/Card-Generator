{"version":3,"sources":["Card.js","App.js","index.js"],"names":["Card","cardData","gradient","className","style","id","mana","map","key","color","cost","backgroundColor","fontSize","name","length","rarity","src","img","alt","width","height","text","componential","rarityColors","common","rare","epic","legendary","App","percentageOfSum","arr","num","arrSum","reduce","a","b","Number","Math","floor","handleChange","e","target","value","type","checked","includes","setCardName","setRedMana","setBlueMana","setYellowMana","setGreenMana","setWhiteMana","setBlackMana","setImgSrc","setRarity","setComp","setCardText","useState","showCard","setShowCard","cardName","setCardData","cardText","imgSrc","comp","redMana","blueMana","yellowMana","greenMana","whiteMana","blackMana","onSubmit","preventDefault","manaValues","filter","onChange","required","min","max","defaultValue","maxLength","manaStyle","sort","lastGrad","backgroundStyle","costSum","i","colorAmount","background","generateGrad","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.947dbf42.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Card.css\";\n\nconst Card = ({ cardData, gradient }) => {\n  return (\n    <div className=\"cardContainer\" style={gradient}>\n      <div className=\"topRow\">\n        <div id=\"manaCostTray\">\n          {cardData.mana.map((mana) => {\n            return (\n              <div id=\"manaCost\" key={mana.color}>\n                {mana.cost}\n                <div className=\"manaSymbol\" style={{ backgroundColor: mana.color }}></div>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n      <div id=\"cardTopInfo\">\n        <div className=\"cardName\" style={{ fontSize: cardData.name.length > 22 ? \"20px\" : \"30px\" }}>\n          {cardData.name}\n        </div>\n        <div className=\"cardRarity\" style={{ backgroundColor: cardData.rarity }}></div>\n      </div>\n      <div className=\"midRow\">\n        <img id=\"cardImg\" src={cardData.img} alt=\"Card Art\" width=\"300px\" height=\"200px\"></img>\n      </div>\n      <div id=\"bottomRow\">\n        <div id=\"cardText\">{cardData.text}</div>\n        <img id=\"type\" src={cardData.componential ? \"breakable.svg\" : \"unique.svg\"} alt=\"type\" width=\"35px\" height=\"35px\"></img>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React, { useState } from \"react\";\nimport Card from \"./Card\";\nimport \"./App.css\";\n\nconst rarityColors = {\n  common: \"lightgray\",\n  rare: \"blue\",\n  epic: \"purple\",\n  legendary: \"orange\",\n};\n\nconst App = () => {\n  const percentageOfSum = (arr, num) => {\n    const arrSum = arr.reduce((a, b) => Number(a) + Number(b));\n    return Math.floor(num * ((100 - (arr.length - 1) * 10) / arrSum));\n  };\n\n  const generateGrad = (arr) => {\n    arr.sort((a, b) => b.cost - a.cost);\n    let manaStyle;\n    let lastGrad = 0;\n    let backgroundStyle = \"\";\n    const costSum = [...arr.map((mana) => mana.cost)];\n    if (arr.length > 1) {\n      for (let i = 0; i < arr.length; i++) {\n        const colorAmount = percentageOfSum(costSum, arr[i].cost);\n        backgroundStyle += `${arr[i].color} ${lastGrad}% ${lastGrad + colorAmount}% `;\n        lastGrad += colorAmount + 10;\n        if (!(i === arr.length - 1)) {\n          backgroundStyle += \", \";\n        }\n      }\n      manaStyle = { background: `linear-gradient(90deg, ${backgroundStyle})` };\n    } else {\n      manaStyle = arr.length === 0 ? { background: \"azure\" } : { background: arr[0].color };\n    }\n    return manaStyle;\n  };\n\n  const handleChange = (e) => {\n    const name = e.target.name;\n    let value = e.target.type === \"checkbox\" ? e.target.checked : e.target.value;\n    if (name.includes(\"Mana\")) {\n      if (value > 10) {\n        value = 10;\n      } else if (value < 0) {\n        value = 0;\n      }\n    }\n    switch (name) {\n      case \"cardName\":\n        setCardName(value);\n        break;\n      case \"redMana\":\n        setRedMana(value);\n        break;\n      case \"blueMana\":\n        setBlueMana(value);\n        break;\n      case \"yellowMana\":\n        setYellowMana(value);\n        break;\n      case \"greenMana\":\n        setGreenMana(value);\n        break;\n      case \"whiteMana\":\n        setWhiteMana(value);\n        break;\n      case \"blackMana\":\n        setBlackMana(value);\n        break;\n      case \"imageUrl\":\n        setImgSrc(value);\n        break;\n      case \"cardRarity\":\n        setRarity(value);\n        break;\n      case \"compCheck\":\n        setComp(value);\n        break;\n      case \"cardText\":\n        setCardText(value);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const allManaValues = [\n      { color: \"red\", cost: redMana },\n      { color: \"blue\", cost: blueMana },\n      { color: \"yellow\", cost: yellowMana },\n      { color: \"green\", cost: greenMana },\n      { color: \"white\", cost: whiteMana },\n      { color: \"black\", cost: blackMana },\n    ];\n    const manaValues = allManaValues.filter((mana) => mana.cost > 0);\n    const cardData = {\n      mana: manaValues,\n      name: cardName,\n      img: imgSrc,\n      rarity: rarityColors[rarity],\n      componential: comp,\n      text: cardText,\n    };\n    setCardData(cardData);\n    setShowCard(true);\n  };\n\n  const [showCard, setShowCard] = useState(false);\n  const [cardName, setCardName] = useState(\"\");\n  const [cardData, setCardData] = useState([]);\n  const [cardText, setCardText] = useState(\"\");\n  const [imgSrc, setImgSrc] = useState(\"\");\n  const [rarity, setRarity] = useState(\"\");\n  const [comp, setComp] = useState(false);\n  const [redMana, setRedMana] = useState(0);\n  const [blueMana, setBlueMana] = useState(0);\n  const [yellowMana, setYellowMana] = useState(0);\n  const [greenMana, setGreenMana] = useState(0);\n  const [whiteMana, setWhiteMana] = useState(0);\n  const [blackMana, setBlackMana] = useState(0);\n\n  return (\n    <div>\n      {!showCard && (\n        <form id=\"cardGenContainer\" onSubmit={handleSubmit}>\n          <span className=\"names\">\n            <label className=\"name\">\n              Card Name:\n              <input type=\"text\" name=\"cardName\" onChange={handleChange} value={cardName} required />\n            </label>\n          </span>\n          <div id=\"mana\">\n            Mana Values:\n            <label className=\"manaLabel\">\n              <div id=\"red\"></div>Red:\n              <input type=\"number\" name=\"redMana\" value={redMana} onChange={handleChange} min=\"0\" max=\"10\" />\n            </label>\n            <label className=\"manaLabel\">\n              <div id=\"blue\"></div> Blue:\n              <input type=\"number\" name=\"blueMana\" value={blueMana} onChange={handleChange} min=\"0\" max=\"10\" />\n            </label>\n            <label className=\"manaLabel\">\n              <div id=\"yellow\"></div> Yellow:\n              <input type=\"number\" name=\"yellowMana\" value={yellowMana} onChange={handleChange} min=\"0\" max=\"10\" />\n            </label>\n            <label className=\"manaLabel\">\n              <div id=\"green\"></div> Green\n              <input type=\"number\" name=\"greenMana\" value={greenMana} onChange={handleChange} min=\"0\" max=\"10\" />\n            </label>\n            <label className=\"manaLabel\">\n              <div id=\"white\"></div> White:\n              <input type=\"number\" name=\"whiteMana\" value={whiteMana} onChange={handleChange} min=\"0\" max=\"10\" />\n            </label>\n            <label className=\"manaLabel\">\n              <div id=\"black\"></div> Black:\n              <input type=\"number\" name=\"blackMana\" value={blackMana} onChange={handleChange} min=\"0\" max=\"10\" />\n            </label>\n          </div>\n          <label id=\"image\">\n            Image Url:\n            <input type=\"text\" name=\"imageUrl\" onChange={handleChange} value={imgSrc} required />\n          </label>\n          <label>\n            Card Rarity\n            <select value={rarity} name=\"cardRarity\" onChange={handleChange}>\n              <option value=\"n/a\" defaultValue>\n                Select a Rarity\n              </option>\n              <option value=\"common\">Common</option>\n              <option value=\"rare\">Rare</option>\n              <option value=\"epic\">Epic</option>\n              <option value=\"legendary\">Legendary</option>\n            </select>\n          </label>\n          <div id=\"checkComp\">\n            <label>Componential</label>\n            <input type=\"checkbox\" name=\"compCheck\" checked={comp} onChange={handleChange} />\n          </div>\n          <label id=\"cardText\">\n            Card Text:\n            <textarea maxLength=\"165\" id=\"textBox\" type=\"text\" name=\"cardText\" onChange={handleChange} value={cardText} />\n          </label>\n          <button>Generate Card</button>\n        </form>\n      )}\n      {showCard && (\n        <div>\n          <Card cardData={cardData} gradient={generateGrad(cardData.mana)} />\n          <form>\n            <button id=\"backButton\">Back</button>\n          </form>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}